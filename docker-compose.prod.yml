services:
  # Caddy Reverse Proxy & Load Balancer
  caddy:
    image: caddy:2.7-alpine
    container_name: fullstack-caddy-prod
    restart: unless-stopped
    ports:
      - "${CADDY_HTTP_PORT:-80}:80"
      - "${CADDY_HTTPS_PORT:-443}:443"
      - "${CADDY_ADMIN_PORT:-2019}:2019"  # Caddy Admin API
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - fullstack-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fullstack-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-demo}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fullstack-network

  # MongoDB Database
  mongo:
    image: mongo:6
    container_name: fullstack-mongo-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-demo}
    volumes:
      - mongo_data:/data/db
    networks:
      - fullstack-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fullstack-redis-prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - fullstack-network

  # Backend NestJS (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: fullstack-backend-prod
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-demo}
      MONGO_URL: mongodb://mongo:27017/${MONGO_INITDB_DATABASE:-demo}
      REDIS_URL: redis://redis:6379
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
    depends_on:
      - postgres
      - mongo
      - redis
    networks:
      - fullstack-network

  # Frontend Angular Universal (Production - SSR/CSR/SSG/PWA)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ssr-runner
      args:
        BUILD_TYPE: ssr
    container_name: fullstack-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      BACKEND_URL: ${BACKEND_INTERNAL_URL:-http://backend:3000}
    depends_on:
      - backend
    networks:
      - fullstack-network

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  fullstack-network:
    name: fullstack-demo-prod
    driver: bridge